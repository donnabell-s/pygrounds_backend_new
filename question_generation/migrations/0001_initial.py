# Generated by Django 5.2.4 on 2025-07-15 04:27

import django.contrib.postgres.fields
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='UploadedDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('file', models.FileField(upload_to='pdfs/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('parsed', models.BooleanField(default=False)),
                ('parsed_pages', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, default=list, size=None)),
                ('total_pages', models.IntegerField(default=0)),
                ('processing_status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='PENDING', max_length=20)),
                ('parse_metadata', models.JSONField(blank=True, default=dict, help_text='Stores parsing configuration and metrics')),
            ],
        ),
        migrations.CreateModel(
            name='DocumentChunk',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chunk_type', models.CharField(choices=[('Header', 'Header'), ('Module', 'Module'), ('Lesson', 'Lesson'), ('Section', 'Section'), ('Subsection', 'Subsection'), ('Text', 'Text'), ('Table', 'Table'), ('Figure', 'Figure'), ('Code', 'Code'), ('Caption', 'Caption'), ('Exercise', 'Exercise'), ('Example', 'Example')], max_length=50)),
                ('text', models.TextField()),
                ('page_number', models.IntegerField()),
                ('position_on_page', models.JSONField(default=dict, help_text='Coordinates of chunk on the page {x1, y1, x2, y2}')),
                ('order_in_doc', models.IntegerField()),
                ('topic_title', models.CharField(blank=True, max_length=255, null=True)),
                ('subtopic_title', models.CharField(blank=True, max_length=255, null=True)),
                ('confidence_score', models.FloatField(blank=True, help_text='Confidence score from the parser', null=True)),
                ('parser_metadata', models.JSONField(blank=True, default=dict, help_text='Additional metadata from the parser')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chunks', to='question_generation.uploadeddocument')),
            ],
            options={
                'ordering': ['page_number', 'order_in_doc'],
            },
        ),
        migrations.CreateModel(
            name='TOCEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('level', models.IntegerField(default=0, help_text='Hierarchy level (0 for top-level entries)')),
                ('start_page', models.IntegerField()),
                ('end_page', models.IntegerField(blank=True, null=True)),
                ('order', models.IntegerField()),
                ('chunked', models.BooleanField(default=False, help_text='Set to True once this TOC entry has been parsed and linked to chunks')),
                ('chunk_count', models.IntegerField(default=0)),
                ('next_entry', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='previous_entry_set', to='question_generation.tocentry')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='question_generation.tocentry')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='question_generation.uploadeddocument')),
            ],
            options={
                'ordering': ['order'],
                'unique_together': {('document', 'order')},
            },
        ),
    ]
